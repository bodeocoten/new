wait (3)
-- Mendapatkan posisi dari HumanoidRootPart local player
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

-- Mendefinisikan Path yang perlu dihindari
local paths = {
    workspace.Map:WaitForChild("Paths"):WaitForChild("1"):WaitForChild("Start"),
    workspace.Map:WaitForChild("Paths"):WaitForChild("1"):WaitForChild("1"),
    workspace.Map:WaitForChild("Paths"):WaitForChild("1"):WaitForChild("2")
}

-- Fungsi untuk mengecek apakah posisi berada terlalu dekat dengan Path
local function isPositionOnPath(position, threshold)
    for _, pathPart in pairs(paths) do
        local pathPosition = pathPart.Position
        if (pathPosition - position).magnitude < threshold then
            -- Posisi berada terlalu dekat dengan Path, return true
            return true
        end
    end
    -- Posisi aman, return false
    return false
end

-- Threshold jarak minimum dari Path
local pathThreshold = 5 -- Ubah sesuai dengan jarak yang aman dari Path

-- Menghitung radius untuk peletakan dalam bentuk lingkaran
local radius = 10 -- Radius lingkaran untuk posisi acak
local usedPositions = {} -- Tabel untuk menyimpan posisi yang sudah digunakan

-- Membuat visualisasi radius lingkaran menggunakan referensi yang diberikan
local radiusIndicator = Instance.new("Part")
radiusIndicator.Shape = Enum.PartType.Ball
radiusIndicator.Size = Vector3.new(radius * 2, 0.1, radius * 2) -- Diameter lingkaran
radiusIndicator.Position = humanoidRootPart.Position + Vector3.new(0, -0.5, 0) -- Ketinggian yang lebih rendah agar menyentuh lantai
radiusIndicator.Anchored = true
radiusIndicator.CanCollide = false
radiusIndicator.BrickColor = BrickColor.new("Bright blue")
radiusIndicator.Transparency = 0.7 -- Meningkatkan transparansi
radiusIndicator.Parent = workspace -- Menempatkan di dalam workspace

-- Fungsi untuk memperbarui posisi lingkaran mengikuti pemain
local function updateRadiusIndicator()
    while true do
        radiusIndicator.Position = humanoidRootPart.Position + Vector3.new(0, -0.5, 0) -- Menyesuaikan ketinggian sedikit di bawah pemain
        wait(0.1) -- Menunggu sebentar sebelum memperbarui lagi
    end
end

-- Jalankan fungsi untuk memperbarui posisi lingkaran
spawn(updateRadiusIndicator)

-- Fungsi untuk mengecek apakah posisi sudah digunakan
local function isPositionUsed(position)
    for _, pos in pairs(usedPositions) do
        if (pos - position).magnitude < 3 then -- Jarak minimum antara Freddy
            return true
        end
    end
    return false
end

-- Fungsi untuk menghasilkan prioritas posisi terdekat
local function generatePriorityPositions(humanoidRootPart, radius)
    local positions = {}
    for i = 1, radius * 2 do
        local angle = math.random() * (2 * math.pi) -- Menghasilkan sudut acak
        local distance = math.random() * radius -- Menghasilkan jarak acak
        local offsetX = math.cos(angle) * distance
        local offsetZ = math.sin(angle) * distance
        local position = humanoidRootPart.Position + Vector3.new(offsetX, 0, offsetZ)
        table.insert(positions, position)
    end

    -- Mengurutkan posisi berdasarkan jarak dari player (posisi terdekat dulu)
    table.sort(positions, function(a, b)
        return (humanoidRootPart.Position - a).magnitude < (humanoidRootPart.Position - b).magnitude
    end)

    return positions
end

-- Loop untuk menyummon unit "Freddy" tanpa batas
while true do
    -- Code ke 1: Menghentikan pengaturan
    local args = {
        [1] = "Reset"
    }
    game:GetService("ReplicatedStorage").Remotes.Misc.StopSettings:FireServer(unpack(args))

    -- Code ke 2: Mengulang sebanyak 68 kali
    for j = 1, 68 do
        game:GetService("ReplicatedStorage").Remotes.Misc.StopSettings:FireServer()
    end

    -- Membuat daftar posisi prioritas (terdekat dengan player dulu)
    local priorityPositions = generatePriorityPositions(humanoidRootPart, radius)

    -- Loop untuk mencoba spawn di posisi terdekat
    for _, newPosition in ipairs(priorityPositions) do
        if not isPositionUsed(newPosition) and not isPositionOnPath(newPosition, pathThreshold) then
            -- Menyimpan posisi yang digunakan
            table.insert(usedPositions, newPosition)

            -- Code ke 3: Menyummon unit "Freddy" di posisi baru
            local argsSummon = {
                [1] = "Freddy",
                [2] = CFrame.new(newPosition) * CFrame.Angles(0, 0, 0)
            }

            game:GetService("ReplicatedStorage").Remotes.Towers.SummonTower:FireServer(unpack(argsSummon))

            -- Break setelah menemukan posisi valid
            break
        end
    end

    -- Delay sebelum menyummon Freddy berikutnya
    wait(7) -- Ganti ini menjadi 10 detik sesuai permintaan Anda
end
